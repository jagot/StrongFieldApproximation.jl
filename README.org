#+TITLE: StrongFieldApproximation.jl
#+AUTHOR: Stefanos Carlström
#+EMAIL: stefanos.carlstrom@gmail.com

[[https://jagot.github.io/StrongFieldApproximation.jl/stable][https://img.shields.io/badge/docs-stable-blue.svg]]
[[https://jagot.github.io/StrongFieldApproximation.jl/dev][https://img.shields.io/badge/docs-dev-blue.svg]]
[[https://github.com/jagot/StrongFieldApproximation.jl/actions][https://github.com/jagot/StrongFieldApproximation.jl/workflows/CI/badge.svg]]
[[https://codecov.io/gh/jagot/StrongFieldApproximation.jl][https://codecov.io/gh/jagot/StrongFieldApproximation.jl/branch/master/graph/badge.svg]]

#+PROPERTY: header-args:jupyter-julia :session *julia-README* :async yes

#+BEGIN_SRC jupyter-julia :exports none
  # Setup for the plots in the README
  using Pkg
  Pkg.activate(".")
  using PyPlot
  using Jagot.plotting
  plot_style("ggplot")

  using Jagot

  using Unitful

  mkpath("images")

  function savefig_f(filename)
      filename = "./images/$(filename).svg"
      savefig(filename, transparent=true)
      filename
  end

  function cutoff(F, Ip)
      I_au = atomic_units(intensity(F))
      ω = atomic_units(energy(F))
      Up = I_au/(4ω^2)
      c = (3.17Up + Ip)/ω
      a = gca()
      a2 = a.twiny()
      a2.set_xlim(a.get_xlim())
      a2.set_xticks([Ip/ω, c])
      a2.set_xticklabels([L"I_p", "Cut-off"])
      sca(a)
  end

  function plot_sfa_dipole(t, x, F, ndt, Ip)
      t_SI = t*24.2u"as"
      tplot = t_SI ./ u"fs" .|> NoUnits
      Fplot = F.(t_SI) ./ u"V/m" .|> NoUnits
      f = digitalfilter(Highpass(12,fs=ndt), Butterworth(20))
      fx = filtfilt(f, x)
      nt = length(t)
      freq = fftshift(fftfreq(nt,ndt))
      X = fftshift(fft(hanning(nt).*x))
      sel = ind(freq, 0):ind(freq,50)
      csubplot(321, nox=true) do
          plot(tplot, Fplot)
          ylabel(L"$F(t)$ [V/m]")
      end
      csubplot(323, nox=true) do
          plot(tplot, x)
          ylabel(L"x(t)")
      end
      csubplot(325) do
          plot(tplot, fx)
          xlabel(L"$t$ [fs]")
          ylabel(L"\tilde{x}(t)")
      end
      csubplot(122) do
          semilogy(freq[sel], abs.(X[sel]))
          cutoff(F, Ip)
          axes_labels_opposite(:y)
          xlabel(L"Harmonic order [$q$]")
          ylabel(L"X(q)")
      end
  end
#+END_SRC

#+RESULTS:
:RESULTS:
:  Activating environment at `~/work/projects/sfa/Project.toml`
: plot_sfa_dipole (generic function with 1 method)
:END:

* Introduction
  This package provides some routines to calculate [[https://en.wikipedia.org/wiki/High_harmonic_generation][high-order harmonic
  generation]] (HHG) in the strong-field approximation (SFA), according
  to the Lewenstein model, presented in

  - Lewenstein, M., Balcou, P., Ivanov, M. Y., L'Huillier, A., & Corkum,
    P. B. (1994). Theory of high-harmonic generation by low-frequency
    laser fields. Physical Review A, 49(3),
    2117. http://dx.doi.org/10.1103/PhysRevA.49.2117

  Note that in this package, there is /no/ corresponding
  implementation of the equally interesting case of photoionization,
  which can also be calculated using various SFA methods.

* Installation
  A few dependencies need to be installed, prior to using this package
  #+BEGIN_SRC julia :exports code
    # Activate the current directory as the environment into which all
    # packages are to be installed
    using Pkg
    Pkg.activate(".")
  #+END_SRC

  Install the dependencies of StrongFieldApproximation and the package itself.
  #+BEGIN_SRC julia :exports code
    pkg"add Unitful"
    pkg"add UnitfulAtomic"
    pkg"add https://github.com/jagot/LiterateOrg.jl"
    pkg"add https://github.com/jagot/Sellmeier.jl"
    pkg"add https://github.com/jagot/ElectricFields.jl"
    pkg"add https://github.com/jagot/StrongFieldApproximation.jl"
  #+END_SRC

  The following packages are useful in the evaluation of the produced
  time-dependent dipole moments.
  #+BEGIN_SRC julia :exports code
    pkg"add FFTW"
    pkg"add DSP"
  #+END_SRC

* Example usage
  We first load a few packages:
  #+BEGIN_SRC jupyter-julia :exports code
    using DSP
    using FFTW
    import FFTW: fftfreq

    # Library that provides simple specification of various electric
    # fields.
    using ElectricFields

    # Unit arithmetic
    using Unitful
    using UnitfulAtomic

    using StrongFieldApproximation
    import StrongFieldApproximation: atomic_units
  #+END_SRC

  #+RESULTS:

  We then need to define an atom model to use; in the SFA model of
  HHG, the atomic nucleus is completely neglected beyond a trivial
  phase factor corresponding to the ionization potential. The dipole
  matrix elements between the ground state and the Volkov states is
  simply given by the Fourier transform of the 1s state.

  #+BEGIN_SRC jupyter-julia :exports both :results scalar
    # Atom model, hydrogen has an ionization potential of 0.5 Ha
    Ip, d = hydrogen_like(0.5)
  #+END_SRC

  #+RESULTS:
: (0.5, SFA.var"#1#2"{Float64}(0.5))

** Gaussian pulse
   #+BEGIN_SRC jupyter-julia :exports both
     # Definition of laser field, Gaussian pulse
     @field(IR) do
         λ = 1070.0u"nm"
         I₀ = 1e14u"W/cm^2"
         τ = 16.2u"fs" # Intensity FWHM
         σmax = 5 # Minimum amount of standard deviations to include
     end
   #+END_SRC

   #+RESULTS:
: Linearly polarized field with
:   – a Fixed carrier @ λ = 1070.00 nm (T = 3.57 fs) 
:   – and a I₀ = 1e+14 W cm^-2 Gaussian envelope of duration 16 fs (intensity FWHM; ±5.19σ) 

   We are now almost ready to compute the time-dependent dipole; we
   need to decide how many time-steps per cycle will be used to compute the
   integrals and how long electron excursions (measured in cycles of
   the fundamental field) we wish to include in the calculation. By
   setting ~tmin=-0.65~, we include excursions which are up to 0.65
   cycles long, i.e. enough for the short trajectory, but not the long
   trajectory.
   #+BEGIN_SRC jupyter-julia :exports both
     ndt = 200 # Time steps per laser cycle
     tmin = -0.65
     x,t = @time propagate(IR,Ip,d,ndt,tmin)
     [x t]
   #+END_SRC

   #+RESULTS:
:RESULTS:
:   0.704314 seconds (3.10 M allocations: 1.491 GiB, 34.99% gc time)
#+begin_example
  4000×2 Array{Float64,2}:
   -0.0          -1475.53
   -2.82284e-29  -1474.79
   -7.18732e-17  -1474.05
   -1.438e-15    -1473.32
   -7.22328e-15  -1472.58
   -1.97826e-14  -1471.84
   -3.60056e-14  -1471.1
   -4.23518e-14  -1470.36
   -1.1216e-14   -1469.63
    9.99565e-14  -1468.89
    3.45924e-13  -1468.15
    7.87216e-13  -1467.41
    1.48087e-12  -1466.67
    ⋮            
   -2.7044e-10    1467.41
   -2.23885e-10   1468.15
   -1.7864e-10    1468.89
   -1.34958e-10   1469.63
   -9.30724e-11   1470.36
   -5.31907e-11   1471.1
   -1.54984e-11   1471.84
    1.9844e-11    1472.58
    5.27009e-11   1473.32
    8.2962e-11    1474.05
    1.10542e-10   1474.79
    1.35382e-10   1475.53
#+end_example
:END:

   #+BEGIN_SRC jupyter-julia :exports results :results value file
     cfigure("gaussian dipole", figsize=(8,6)) do
         plot_sfa_dipole(t, x, IR, ndt, Ip)
     end
     savefig_f("gaussian-sfa")
   #+END_SRC

   #+RESULTS:
:RESULTS:
[[file:./images/gaussian-sfa.svg]]
:END:

   In the left column we see, top: the driving electric field ~F(t)~,
   middle: the result time-dependent dipole moment ~x(t)~, as
   calculated by the SFA, bottom: the same dipole moment, after
   applying a Butterworth high-pass filter, with its cut-off frequency
   at harmonic order 12 (~digitalfilter(Highpass(12,fs=ndt),
   Butterworth(20))~). In the right column, we see the harmonic
   spectrum, computed by the fast Fourier transform (~FFTW.fft~),
   after applying a [[https://en.wikipedia.org/wiki/Hann_function][Hann window]] (~DSP.hanning~) to the time-dependent
   signal. The energies corresponding the ionization potential and the
   HHG cut-off are marked on the top x axis.

** Continuous-wave
   We can repeat the same calculation, but using a continuous-wave
   field, i.e. with constant amplitude. This is an unphysical field,
   but allows us to separate effects from one another.
   #+BEGIN_SRC jupyter-julia :exports both
     @field(IR) do
         λ = 1070.0u"nm"
         I₀ = 1e14u"W/cm^2"
         env = :cw
         Tmax = 5
     end
   #+END_SRC

   #+RESULTS:
: Linearly polarized field with
:   – a Fixed carrier @ λ = 1070.00 nm (T = 3.57 fs) 
:   – and a I₀ = 1e+14 W cm^-2 CW envelope of duration 18 fs (5 cycles) 

   We otherwise use the same parameters as before:
   #+BEGIN_SRC jupyter-julia :exports both
     ndt = 200 # Time steps per laser cycle
     tmin = -0.65
     x,t = @time propagate(IR,Ip,d,ndt,tmin)
     [x t]
   #+END_SRC

   #+RESULTS:
:RESULTS:
:   0.695001 seconds (1.78 M allocations: 411.711 MiB, 11.62% gc time)
#+begin_example
  1000×2 Array{Float64,2}:
   -0.0            0.0
   -0.0            0.738503
   -2.79218e-7     1.47701
   -2.24492e-6     2.21551
   -7.83407e-6     2.95401
   -1.72465e-5     3.69252
   -2.61982e-5     4.43102
   -2.36365e-5     5.16952
    9.21411e-6     5.90803
    9.78665e-5     6.64653
    0.000271472    7.38503
    0.000557969    8.12354
    0.000978348    8.86204
    ⋮            
   -0.00158189   729.641
   -0.00136677   730.38
   -0.0008525    731.118
   -0.000346782  731.857
   -0.000198417  732.595
   -0.000376566  733.334
   -0.000536866  734.072
   -0.000409681  734.811
   -4.19182e-5   735.549
    0.000305581  736.288
    0.000417983  737.026
    0.000276498  737.765
#+end_example
:END:

   #+BEGIN_SRC jupyter-julia :exports results :results value file
     cfigure("cw dipole", figsize=(8,6)) do
         plot_sfa_dipole(t, x, IR, ndt, Ip)
     end
     savefig_f("cw-sfa")
   #+END_SRC

   #+RESULTS:
:RESULTS:
[[file:./images/cw-sfa.svg]]
:END:

   This time, we see that the harmonic peaks are much more
   well-defined, since they are not convoluted with the Fourier
   transform of the time-dependent envelope.
